AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Amazon Cognito User Pool with Passwordless Facial Recognition Auth configured

  '
Metadata:
  AWS::ServerlessRepo::Application:
    Name: amazon-cognito-passwordless-facial-rekognition-auth
    Description: 'An Amazon Cognito user pool, pre-configured with AWS Lambda triggers
      to implement passwordless facial recognition auth using Amazon Rekognition

      '
    Author: Enrico Bergamo
    SpdxLicenseId: MIT-0
    LicenseUrl: s3://enrico-sam-bucket/dccb8cfd068b1021fcc401746d63165a
    ReadmeUrl: s3://enrico-sam-bucket/fabc1fb0d9298d91a7068dd0af5080a2
    Labels:
    - cognito
    - passwordless
    - authentication
    - rekognition
    - facial
    - recognition
    - auth
    - sample
    HomepageUrl: https://github.com/aws-samples/amazon-cognito-passwordless-email-auth/tree/master/cognito
    SemanticVersion: 0.1.1
    SourceCodeUrl: https://github.com/aws-samples/amazon-cognito-passwordless-email-auth/tree/master/cognito
Parameters:
  UserPoolName:
    Type: String
    Description: The name you want the Amazon Cognito User Pool to be created with
  CollectionName:
    Type: String
    Description: The custom Amazon Rekognition collection to index user faces
  DocumentUploadBucketName:
    Type: String
    Description: The S3 bucket name for uploading custom documents when users sign
      up
  SignInUploadBucketName:
    Type: String
    Description: The S3 bucket name for uploading user photos when signing in for
      comparison
Globals:
  Function:
    Environment:
      Variables:
        COLLECTION_NAME:
          Ref: CollectionName
        BUCKET_SIGN_UP:
          Ref: DocumentUploadBucketName
Resources:
  IndexFaces:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-sam-bucket/3ecf2e1ef63a4ff9fb1b14bfbb4bb458
      Handler: index-faces.handler
      Runtime: python3.6
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - rekognition:IndexFaces
          Resource: '*'
  CreateRekognitionCollectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-sam-bucket/dc88211c4abdf20e22e190224c920eac
      Handler: create-collection.handler
      Runtime: python3.6
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - rekognition:CreateCollection
          - rekognition:DeleteCollection
          Resource: '*'
  DefineAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-sam-bucket/b20b7017f66c90da69921f00ee957cea
      Handler: define-auth-challenge.handler
      Runtime: nodejs8.10
  CreateAuthChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-sam-bucket/83be31b21d47cc10e1c5b0d13b37d46e
      Handler: create-auth-challenge.handler
      Runtime: nodejs8.10
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:Query
          Resource: '*'
  VerifyAuthChallengeResponse:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-sam-bucket/bae40fa82a362f153f4262e36e7409f9
      Handler: verify-auth-challenge-response.handler
      Runtime: nodejs8.10
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:getObject
          - rekognition:SearchFacesByImage
          Resource: '*'
  PreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://enrico-sam-bucket/0691167d61ee96f3e2fe1a74bb6ebcd1
      Handler: pre-sign-up.handler
      Runtime: nodejs8.10
  RekognitionCollection:
    Type: Custom::CustomResource
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CreateRekognitionCollectionLambda
        - Arn
  BucketSignUp:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: DocumentUploadBucketName
  BucketSignIn:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: SignInUploadBucketName
  CollectionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: RekognitionId
        AttributeType: S
      - AttributeName: FullName
        AttributeType: S
      KeySchema:
      - AttributeName: RekognitionId
        KeyType: HASH
      - AttributeName: FullName
        KeyType: RANGE
      GlobalSecondaryIndexes:
      - IndexName: FullName-index
        KeySchema:
        - AttributeName: FullName
          KeyType: HASH
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName:
        Ref: CollectionName
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: UserPoolName
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: s3-image-object
        AttributeDataType: String
        Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
      - email
      MfaConfiguration: 'OFF'
      LambdaConfig:
        CreateAuthChallenge:
          Fn::GetAtt:
          - CreateAuthChallenge
          - Arn
        DefineAuthChallenge:
          Fn::GetAtt:
          - DefineAuthChallenge
          - Arn
        PreSignUp:
          Fn::GetAtt:
          - PreSignUp
          - Arn
        VerifyAuthChallengeResponse:
          Fn::GetAtt:
          - VerifyAuthChallengeResponse
          - Arn
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: rekognition-auth-client
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
      ExplicitAuthFlows:
      - CUSTOM_AUTH_FLOW_ONLY
Outputs:
  RekognitionCollectionArn:
    Description: The Amazon Rekognition Custom Collection ARN.
    Value:
      Fn::GetAtt:
      - RekognitionCollection
      - Message
  SignUpBucketName:
    Value:
      Ref: BucketSignUp
    Description: Name of the sign up Amazon S3 bucket.
  SignInBucketName:
    Value:
      Ref: BucketSignIn
    Description: Name of the sign in Amazon S3 bucket.
  TableName:
    Value:
      Ref: CollectionTable
    Description: Name of the DynamoDB table containing Rekognition metadata for each
      Cognito user
  UserPoolId:
    Value:
      Ref: UserPool
    Description: ID of the Cognito User Pool
  UserPoolWebClientId:
    Value:
      Ref: UserPoolClient
    Description: ID of the Cognito User Pool Client for Front-End Subscription
